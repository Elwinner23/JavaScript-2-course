"use strict";
const luhn = require('luhn');
const types_1 = require("./types");
const allCodes = types_1.types.map((type) => type.code);
const testNumbers = [
    '378282246310005', '371449635398431', '378734493671000', '30569309025904', '38520000023237',
    '4111111111111111', '4012888888881881', '4222222222222',
    '5555555555554444', '5105105105105100 ',
    '6011111111111117', '6011000990139424',
];
const clean = (number) => number.replace(/\s+/g, '');
const isTestNumber = (number) => testNumbers.includes(clean(number));
const isValid = (number) => {
    number = clean(number);
    if (luhn.validate(number)) {
        return !isTestNumber(number);
    }
    else {
        return false;
    }
};
const getType = (number) => {
    let card;
    for (let i = 0; i < types_1.types.length; i++) {
        card = types_1.types[i];
        if (card.pattern.test(clean(number))) {
            return card;
        }
    }
};
const getTypeCode = (number) => {
    var type = getType(clean(number));
    if (type) {
        return type.code;
    }
};
const getTypeName = (number) => {
    var type = getType(clean(number));
    if (type) {
        return type.name;
    }
};
const isAccepted = (number, opts) => {
    number = clean(number);
    return isValid(number) && opts.accepted.includes(getTypeCode(number));
};
const getInfo = (number, opts) => {
    number = clean(number);
    const info = { valid: isValid(number) };
    const card = getType(number);
    if (card) {
        info.code = card.code;
        info.name = card.name;
        info.test = isTestNumber(number);
        if (opts === null || opts === void 0 ? void 0 : opts.accepted) {
            info.accepted = isAccepted(number, opts);
        }
    }
    return info;
};
const functions = {
    isTestNumber,
    isValid,
    getTypeName,
    getTypeCode,
    getInfo,
    allCodes,
};
function advancedHelper(opts) {
    function F() {
        this.isAccepted = (number) => isAccepted(number, opts);
        this.getInfo = (number) => getInfo(number, opts);
    }
    ;
    F.prototype = functions;
    return new F;
}
module.exports = Object.assign(advancedHelper, functions);
